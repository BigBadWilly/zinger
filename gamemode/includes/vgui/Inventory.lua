// objectlocal PANEL = {};// textureslocal Top = Material( "zinger/hud/inventop" );local Middle = Material( "zinger/hud/invenmid" );local Bottom = Material( "zinger/hud/invenbottom" );local BlackModelSimple = Material( "black_outline" );/*------------------------------------	Init()------------------------------------*/function PANEL:Init()	// draw enough rows for all items to show	self.RowCount = inventory.GetMaxRow();		self.Items = {};		// setup	self:SetSize( 512, ( 128 + 64 ) + ( 64 * self.RowCount ) );	self:Center();		// create 3D crate	self.Crate = vgui.Create( "3DIcon", self );	self.Crate:SetSize( 200, 200 );	self.Crate:SetPos( 20, -45 );	self.Crate:SetModel( "models/zinger/crate.mdl" );	self.Crate:SetAngles( Angle( 0, 0, 20 ) );	self.Crate:SetViewDistance( 70 );	self.Crate:SetOutline( 1.07 );	self.Crate.Run = function( icon )			icon.Entity:SetAngles( icon.Entity:GetAngles() + Angle( 0, FrameTime() * 10, 0 ) );		end	end/*------------------------------------	Show()------------------------------------*/function PANEL:Show()	// show	self:SetVisible( true );	end/*------------------------------------	Hide()------------------------------------*/function PANEL:Hide()	// hide	self:SetVisible( false );end/*------------------------------------	PerformLayout()------------------------------------*/function PANEL:PerformLayout()end/*------------------------------------	ApplySchemeSettings()------------------------------------*/function PANEL:ApplySchemeSettings()	end/*------------------------------------	Think()------------------------------------*/function PANEL:Think()	local inventory = inventory.Get();		// create items	for item, amount in pairs( inventory ) do			if( !IsValid( self.Items[item] ) ) then					local row = item.InventoryRow;			local col = item.InventoryColumn;			local x = 38 + ( col - 1 ) * 64;			local y = 133 + ( row - 1 ) * 64;					// create 3D crate			local model = vgui.Create( "InventoryIcon", self );			model:SetSize( 54, 54 );			model:SetPos( x, y );			model:SetItem( item );			model:SetCount( amount );			model:SetCursor( "hand" );			model.OnMousePressed = function()							ButtonSoundDefault();				RunConsoleCommand( "item", "equip", item.Key ); 						end			self.Items[item] = model;					else					self.Items[item]:SetCount( amount );				end		end		// cleanup	for item, model in pairs( self.Items ) do				if( !inventory[ item ] ) then					model:Remove();			self.Items[ item ] = nil;					end			endend/*------------------------------------	Paint()------------------------------------*/function PANEL:Paint()	// get size	local w, h = self:GetSize();		// draw top	surface.SetDrawColor( 255, 255, 255, 255 );	surface.SetMaterial( Top );	surface.DrawTexturedRect( 0, 0, w, 128 );		// draw each row	for i = 0, self.RowCount - 1 do			// draw middle		surface.SetMaterial( Middle );		surface.DrawTexturedRect( 0, 128 + ( i * 64 ), w, 64 );		end		// draw bottom	surface.SetMaterial( Bottom );	surface.DrawTexturedRect( 0, h - 64, w, 64 );end// registerderma.DefineControl( "Inventory", "", PANEL, "DPanel" );